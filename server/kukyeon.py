# -*- coding: utf-8 -*-
"""KukYeon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1irE99UwXhqouwhdcU0JzpB7rH7c_Gaid

**국민일보,연합뉴스 크롤링**  
국민일보, 연합뉴스는 뉴스 정보가 Rss의 xml페이지에 모두 있으므로 Rss링크에서 바로 크롤링
"""

!pip install feedparser

!pip install pymongo

import feedparser
import re
from pymongo import MongoClient
from pymongo.cursor import CursorType
import pymongo

kmib_url = ['http://rss.kmib.co.kr/data/kmibRssAll.xml','http://rss.kmib.co.kr/data/kmibPolRss.xml','http://rss.kmib.co.kr/data/kmibSocRss.xml','http://rss.kmib.co.kr/data/kmibEcoRss.xml',
            'http://rss.kmib.co.kr/data/kmibIntRss.xml','http://rss.kmib.co.kr/data/kmibSpoRss.xml','http://rss.kmib.co.kr/data/kmibCulRss.xml']
yonhap_url = ['http://www.yonhapnewstv.co.kr/browse/feed/','http://www.yonhapnewstv.co.kr/category/news/politics/feed/','http://www.yonhapnewstv.co.kr/category/news/society/feed/',
              'http://www.yonhapnewstv.co.kr/category/news/economy/feed/','http://www.yonhapnewstv.co.kr/category/news/international/feed/','http://www.yonhapnewstv.co.kr/category/news/sports/feed/'
              ,'http://www.yonhapnewstv.co.kr/category/news/culture/feed/']

# connection = pymongo.MongoClinet(mongo_server,port)
connection = pymongo.MongoClient('mongodb://Ki In Han:<depa3848>@cluster0-shard-00-00.kz4b2.mongodb.net:27017,cluster0-shard-00-01.kz4b2.mongodb.net:27017,cluster0-shard-00-02.kz4b2.mongodb.net:27017/<CapstonDesign>?ssl=true&replicaSet=atlas-nbdtlg-shard-0&authSource=admin&retryWrites=true&w=majority')
#본인 ReadWrite권한자로 접근
print('connection complete')

cl = ['전체','정치','사회','경제','국제','스포츠','문화']                         #category list
pl = ['조선일보','중앙일보','동아일보','KBS','SBS','국민일보','연합뉴스']         #press list

"""**국민일보 크롤링-전처리-저장**"""

class DBHandler:
    def __init__(self):
        host = "localhost"
        port = "27017"
        self.client = MongoClient(host, int(port))

    def insert_item_one(self, data, db_name='CapstonDesign', collection_name='Articles'):
        result = self.client[db_name][collection_name].insert_one(data).inserted_id
        return result

    def insert_item_many(self, datas, db_name='CapstonDesign', collection_name='Articles'):
        result = self.client[db_name][collection_name].insert_many(datas).inserted_ids
        return result

    def find_item_one(self, condition=None, db_name='CapstonDesign', collection_name='Articles'):
        result = self.client[db_name][collection_name].find_one(condition, {"_id": False})
        return result

    def find_item(self, condition=None, db_name='CapstonDesign', collection_name='Articles'):
        result = self.client[db_name][collection_name].find(condition, {"_id": False}, no_cursor_timeout=True, cursor_type=CursorType.EXHAUST)
        return result

    def delete_item_one(self, condition=None, db_name='CapstonDesign', collection_name='Articles'):
        result = self.client[db_name][collection_name].delete_one(condition)
        return result

    def delete_item_many(self, condition=None, db_name='CapstonDesign', collection_name='Articles'):
        result = self.client[db_name][collection_name].delete_many(condition)
        return result

    def update_item_one(self, condition=None, update_value=None, db_name='CapstonDesign', collection_name='Articles'):
        result = self.client[db_name][collection_name].update_one(filter=condition, update=update_value)
        return result

    def update_item_many(self, condition=None, update_value=None, db_name='CapstonDesign', collection_name='Articles'):
        result = self.client[db_name][collection_name].update_many(filter=condition, update=update_value)
        return result

    def text_search(self, text=None, db_name='CapstonDesign', collection_name='Articles'):
        result = self.client[db_name][collection_name].find({"$text": {"$search": text}})
        return result
#text 정제함수
def clean_text(text):
  content = text
  cleaned_text = re.sub('[a-zA-Z]','',content)
  cleaned_text = re.sub('[\{\}\[\]\/?.,;:|\)*~`!^\-_+<>@\#$%&\\\=\(\'\"]', '', cleaned_text)
  cleaned_text = cleaned_text.replace("연합뉴스TV 기사문의 및 제보","")
  cleaned_text = cleaned_text.replace("카톡/라인 jebo23 (끝)","")
  return cleaned_text

def insert_item_one(self, data, db_name='CapstonDesign', collection_name='Articles'):
        result = self.client[db_name][collection_name].insert_one(data).inserted_id
        return result
  
def insert_item_many(self, datas, db_name='CapstonDesign', collection_name='Articles'):
        result = self.client[db_name][collection_name].insert_many(datas).inserted_ids
        return result
i=0
j=0
kmib_dic = []
yonhap_dic = []

for rss in kmib_url:
  if rss == None:
    break
  else:
    parse_rss = feedparser.parse(rss)
    for p in parse_rss.entries:
      kmib_dic.append({'title':p.title,'link':p.link,'category':cl[i],'content':clean_text(p.description)})
      print(kmib_dic[j])
      print('\n')
      j+=1
    i+=1
i=0
j=0

insert_item_many(self,kmib_dic,'CapstonDesign','Articles')

for rss in yonhap_url:
  if rss == None:
    break
  else:
    parse_rss = feedparser.parse(rss)
    for p in parse_rss.entries:
      yonhap_url_dic.append({'title':p.title,'link':p.link,'category':cl[i],'content':clean_text(p.description)})
      print(yonhap_url_dic[j])
      print('\n')
      j+=1
    i+=1
i=0
j=0

insert_item_many(self,yonhap_dic,'CapstonDesign','Articles')